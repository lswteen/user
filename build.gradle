plugins {
	id 'org.springframework.boot' version '2.5.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'org.asciidoctor.convert' version '1.5.8'
	id 'java'
}

group = 'com.renzo'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation "org.springframework.data:spring-data-commons"
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.data:spring-data-envers'
	implementation 'org.springframework.boot:spring-boot-configuration-processor'

	compile("com.querydsl:querydsl-apt:4.4.0")
	compile("com.querydsl:querydsl-sql:4.4.0")
	compile("com.querydsl:querydsl-sql-spring:4.4.0")
	compile("com.querydsl:querydsl-jpa:4.4.0")

	runtimeOnly 'mysql:mysql-connector-java'
	implementation('com.h2database:h2:1.4.196')

	implementation 'io.jsonwebtoken:jjwt:0.9.1'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation "org.apache.commons:commons-lang3:3.11"
	implementation 'javax.validation:validation-api:2.0.1.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

def queryDslDir = "src/main/generated"
def queryDslOutput = file("${queryDslDir}")
sourceSets {
	main {
		java {
			srcDir queryDslDir
		}
	}
}

dependencies {
	compile "com.querydsl:querydsl-jpa:4.4.0"
	annotationProcessor(
			"com.querydsl:querydsl-apt:4.4.0:jpa"
			, "javax.annotation:javax.annotation-api:1.3.2"
			, "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final"
	)
}

def gradleGeneratedDir = "./build/generated/source/apt"
def gradleQueryDslOutput = file("${gradleGeneratedDir}")

task cleanUpQueryDsl(type: Copy) {
	from "${gradleGeneratedDir}/main"
	into "${queryDslDir}"
	doLast {
		delete gradleQueryDslOutput
	}
}

compileJava.finalizedBy(cleanUpQueryDsl)

clean {
	delete gradleQueryDslOutput
	delete queryDslOutput
}

test {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

asciidoctor {
	inputs.dir snippetsDir
	dependsOn test
}
